@c Automatically generated, do not edit.

@c snarfed from ../guile/src/core.c:3361
@deffn {Scheme Procedure} set-log-level! level
Enable GnuTLS logging up to @var{level} (an integer).
@end deffn

@c snarfed from ../guile/src/core.c:3343
@deffn {Scheme Procedure} set-log-procedure! proc
Use @var{proc} (a two-argument procedure) as the global GnuTLS log procedure.
@end deffn

@c snarfed from ../guile/src/core.c:3304
@deffn {Scheme Procedure} set-certificate-credentials-openpgp-keys! cred pub sec
Use certificate @var{pub} and secret key @var{sec} in certificate credentials @var{cred}.
@end deffn

@c snarfed from ../guile/src/core.c:3266
@deffn {Scheme Procedure} openpgp-keyring-contains-key-id? keyring id
Return @code{#f} if key ID @var{id} is in @var{keyring}, @code{#f} otherwise.
@end deffn

@c snarfed from ../guile/src/core.c:3220
@deffn {Scheme Procedure} import-openpgp-keyring data format
Import @var{data} (a u8vector) according to @var{format} and return the imported keyring.
@end deffn

@c snarfed from ../guile/src/core.c:3194
@deffn {Scheme Procedure} openpgp-certificate-usage key
Return a list of values denoting the key usage of @var{key}.
@end deffn

@c snarfed from ../guile/src/core.c:3177
@deffn {Scheme Procedure} openpgp-certificate-version key
Return the version of the OpenPGP message format (RFC2440) honored by @var{key}.
@end deffn

@c snarfed from ../guile/src/core.c:3156
@deffn {Scheme Procedure} openpgp-certificate-algorithm key
Return two values: the certificate algorithm used by @var{key} and the number of bits used.
@end deffn

@c snarfed from ../guile/src/core.c:3120
@deffn {Scheme Procedure} openpgp-certificate-names key
Return the list of names for @var{key}.
@end deffn

@c snarfed from ../guile/src/core.c:3097
@deffn {Scheme Procedure} openpgp-certificate-name key index
Return the @var{index}th name of @var{key}.
@end deffn

@c snarfed from ../guile/src/core.c:3039
@deffn {Scheme Procedure} openpgp-certificate-fingerprint key
Return a new u8vector denoting the fingerprint of @var{key}.
@end deffn

@c snarfed from ../guile/src/core.c:3009
@deffn {Scheme Procedure} openpgp-certificate-fingerprint! key fpr
Store in @var{fpr} (a u8vector) the fingerprint of @var{key}.  Return the number of bytes stored in @var{fpr}.
@end deffn

@c snarfed from ../guile/src/core.c:2974
@deffn {Scheme Procedure} openpgp-certificate-id! key id
Store the ID (an 8 byte sequence) of certificate @var{key} in @var{id} (a u8vector).
@end deffn

@c snarfed from ../guile/src/core.c:2948
@deffn {Scheme Procedure} openpgp-certificate-id key
Return the ID (an 8-element u8vector) of certificate @var{key}.
@end deffn

@c snarfed from ../guile/src/core.c:2893
@deffn {Scheme Procedure} import-openpgp-private-key data format [pass]
Return a new OpenPGP private key object resulting from the import of @var{data} (a uniform array) according to @var{format}.  Optionally, a passphrase may be provided.
@end deffn

@c snarfed from ../guile/src/core.c:2848
@deffn {Scheme Procedure} import-openpgp-certificate data format
Return a new OpenPGP certificate object resulting from the import of @var{data} (a uniform array) according to @var{format}.
@end deffn

@c snarfed from ../guile/src/core.c:2784
@deffn {Scheme Procedure} x509-certificate-subject-alternative-name cert index
Return two values: the alternative name type for @var{cert} (i.e., one of the @code{x509-subject-alternative-name/} values) and the actual subject alternative name (a string) at @var{index}. Both values are @code{#f} if no alternative name is available at @var{index}.
@end deffn

@c snarfed from ../guile/src/core.c:2749
@deffn {Scheme Procedure} x509-certificate-subject-key-id cert
Return the subject key ID (a u8vector) for @var{cert}.
@end deffn

@c snarfed from ../guile/src/core.c:2718
@deffn {Scheme Procedure} x509-certificate-authority-key-id cert
Return the key ID (a u8vector) of the X.509 certificate authority of @var{cert}.
@end deffn

@c snarfed from ../guile/src/core.c:2686
@deffn {Scheme Procedure} x509-certificate-key-id cert
Return a statistically unique ID (a u8vector) for @var{cert} that depends on its public key parameters.  This is normally a 20-byte SHA-1 hash.
@end deffn

@c snarfed from ../guile/src/core.c:2664
@deffn {Scheme Procedure} x509-certificate-version cert
Return the version of @var{cert}.
@end deffn

@c snarfed from ../guile/src/core.c:2637
@deffn {Scheme Procedure} x509-certificate-key-usage cert
Return the key usage of @var{cert} (i.e., a list of @code{key-usage/} values), or the empty list if @var{cert} does not contain such information.
@end deffn

@c snarfed from ../guile/src/core.c:2614
@deffn {Scheme Procedure} x509-certificate-public-key-algorithm cert
Return two values: the public key algorithm (i.e., one of the @code{pk-algorithm/} values) of @var{cert} and the number of bits used.
@end deffn

@c snarfed from ../guile/src/core.c:2591
@deffn {Scheme Procedure} x509-certificate-signature-algorithm cert
Return the signature algorithm used by @var{cert} (i.e., one of the @code{sign-algorithm/} values).
@end deffn

@c snarfed from ../guile/src/core.c:2559
@deffn {Scheme Procedure} x509-certificate-matches-hostname? cert hostname
Return true if @var{cert} matches @var{hostname}, a string denoting a DNS host name.  This is the basic implementation of @uref{http://tools.ietf.org/html/rfc2818, RFC 2818} (aka. HTTPS).
@end deffn

@c snarfed from ../guile/src/core.c:2541
@deffn {Scheme Procedure} x509-certificate-issuer-dn-oid cert index
Return the OID (a string) at @var{index} from @var{cert}'s issuer DN.  Return @code{#f} if no OID is available at @var{index}.
@end deffn

@c snarfed from ../guile/src/core.c:2527
@deffn {Scheme Procedure} x509-certificate-dn-oid cert index
Return OID (a string) at @var{index} from @var{cert}.  Return @code{#f} if no OID is available at @var{index}.
@end deffn

@c snarfed from ../guile/src/core.c:2465
@deffn {Scheme Procedure} x509-certificate-issuer-dn cert
Return the distinguished name (DN) of X.509 certificate @var{cert}.
@end deffn

@c snarfed from ../guile/src/core.c:2452
@deffn {Scheme Procedure} x509-certificate-dn cert
Return the distinguished name (DN) of X.509 certificate @var{cert}.  The form of the DN is as described in @uref{http://tools.ietf.org/html/rfc2253, RFC 2253}.
@end deffn

@c snarfed from ../guile/src/core.c:2362
@deffn {Scheme Procedure} pkcs8-import-x509-private-key data format [pass [encrypted]]
Return a new X.509 private key object resulting from the import of @var{data} (a uniform array) according to @var{format}.  Optionally, if @var{pass} is not @code{#f}, it should be a string denoting a passphrase.  @var{encrypted} tells whether the private key is encrypted (@code{#t} by default).
@end deffn

@c snarfed from ../guile/src/core.c:2313
@deffn {Scheme Procedure} import-x509-private-key data format
Return a new X.509 private key object resulting from the import of @var{data} (a uniform array) according to @var{format}.
@end deffn

@c snarfed from ../guile/src/core.c:2268
@deffn {Scheme Procedure} import-x509-certificate data format
Return a new X.509 certificate object resulting from the import of @var{data} (a uniform array) according to @var{format}.
@end deffn

@c snarfed from ../guile/src/core.c:2240
@deffn {Scheme Procedure} server-session-psk-username session
Return the username associated with PSK server session @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:2196
@deffn {Scheme Procedure} set-psk-client-credentials! cred username key key-format
Set the client credentials for @var{cred}, a PSK client credentials object.
@end deffn

@c snarfed from ../guile/src/core.c:2176
@deffn {Scheme Procedure} make-psk-client-credentials 
Return a new PSK client credentials object.
@end deffn

@c snarfed from ../guile/src/core.c:2148
@deffn {Scheme Procedure} set-psk-server-credentials-file! cred file
Use @var{file} as the password file for PSK server credentials @var{cred}.
@end deffn

@c snarfed from ../guile/src/core.c:2128
@deffn {Scheme Procedure} make-psk-server-credentials 
Return new PSK server credentials.
@end deffn

@c snarfed from ../guile/src/core.c:1840
@deffn {Scheme Procedure} peer-certificate-status session
Verify the peer certificate for @var{session} and return a list of @code{certificate-status} values (such as @code{certificate-status/revoked}), or the empty list if the certificate is valid.
@end deffn

@c snarfed from ../guile/src/core.c:1812
@deffn {Scheme Procedure} set-certificate-credentials-verify-flags! cred [flags...]
Set the certificate verification flags to @var{flags}, a series of @code{certificate-verify} values.
@end deffn

@c snarfed from ../guile/src/core.c:1790
@deffn {Scheme Procedure} set-certificate-credentials-verify-limits! cred max-bits max-depth
Set the verification limits of @code{peer-certificate-status} for certificate credentials @var{cred} to @var{max_bits} bits for an acceptable certificate and @var{max_depth} as the maximum depth of a certificate chain.
@end deffn

@c snarfed from ../guile/src/core.c:1748
@deffn {Scheme Procedure} set-certificate-credentials-x509-keys! cred certs privkey
Have certificate credentials @var{cred} use the X.509 certificates listed in @var{certs} and X.509 private key @var{privkey}.
@end deffn

@c snarfed from ../guile/src/core.c:1702
@deffn {Scheme Procedure} set-certificate-credentials-x509-key-data! cred cert key format
Use X.509 certificate @var{cert} and private key @var{key}, both uniform arrays containing the X.509 certificate and key in format @var{format}, for certificate credentials @var{cred}.
@end deffn

@c snarfed from ../guile/src/core.c:1682
@deffn {Scheme Procedure} set-certificate-credentials-x509-crl-data! cred data format
Use @var{data} (a uniform array) as the X.509 CRL (certificate revocation list) database for @var{cred}.  On success, return the number of CRLs processed.
@end deffn

@c snarfed from ../guile/src/core.c:1663
@deffn {Scheme Procedure} set-certificate-credentials-x509-trust-data! cred data format
Use @var{data} (a uniform array) as the X.509 trust database for @var{cred}.  On success, return the number of certificates processed.
@end deffn

@c snarfed from ../guile/src/core.c:1644
@deffn {Scheme Procedure} set-certificate-credentials-x509-crl-file! cred file format
Use @var{file} as the X.509 CRL (certificate revocation list) file for certificate credentials @var{cred}.  On success, return the number of CRLs processed.
@end deffn

@c snarfed from ../guile/src/core.c:1625
@deffn {Scheme Procedure} set-certificate-credentials-x509-trust-file! cred file format
Use @var{file} as the X.509 trust file for certificate credentials @var{cred}.  On success, return the number of certificates processed.
@end deffn

@c snarfed from ../guile/src/core.c:1583
@deffn {Scheme Procedure} set-certificate-credentials-x509-key-files! cred cert-file key-file format
Use @var{file} as the password file for PSK server credentials @var{cred}.
@end deffn

@c snarfed from ../guile/src/core.c:1561
@deffn {Scheme Procedure} set-certificate-credentials-rsa-export-parameters! cred rsa-params
Use RSA parameters @var{rsa_params} for certificate credentials @var{cred}.
@end deffn

@c snarfed from ../guile/src/core.c:1539
@deffn {Scheme Procedure} set-certificate-credentials-dh-parameters! cred dh-params
Use Diffie-Hellman parameters @var{dh_params} for certificate credentials @var{cred}.
@end deffn

@c snarfed from ../guile/src/core.c:1519
@deffn {Scheme Procedure} make-certificate-credentials 
Return new certificate credentials (i.e., for use with either X.509 or OpenPGP certificates.
@end deffn

@c snarfed from ../guile/src/core.c:1413
@deffn {Scheme Procedure} pkcs1-export-rsa-parameters rsa-params format
Export Diffie-Hellman parameters @var{rsa_params} in PKCS1 format according for @var{format} (an @code{x509-certificate-format} value).  Return a @code{u8vector} containing the result.
@end deffn

@c snarfed from ../guile/src/core.c:1368
@deffn {Scheme Procedure} pkcs1-import-rsa-parameters array format
Import Diffie-Hellman parameters in PKCS1 format (further specified by @var{format}, an @code{x509-certificate-format} value) from @var{array} (a homogeneous array) and return a new @code{rsa-params} object.
@end deffn

@c snarfed from ../guile/src/core.c:1336
@deffn {Scheme Procedure} make-rsa-parameters bits
Return new RSA parameters.
@end deffn

@c snarfed from ../guile/src/core.c:1315
@deffn {Scheme Procedure} set-anonymous-server-dh-parameters! cred dh-params
Set the Diffie-Hellman parameters of anonymous server credentials @var{cred}.
@end deffn

@c snarfed from ../guile/src/core.c:1295
@deffn {Scheme Procedure} make-anonymous-client-credentials 
Return anonymous client credentials.
@end deffn

@c snarfed from ../guile/src/core.c:1277
@deffn {Scheme Procedure} make-anonymous-server-credentials 
Return anonymous server credentials.
@end deffn

@c snarfed from ../guile/src/core.c:1256
@deffn {Scheme Procedure} set-session-dh-prime-bits! session bits
Use @var{bits} DH prime bits for @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:1234
@deffn {Scheme Procedure} pkcs3-export-dh-parameters dh-params format
Export Diffie-Hellman parameters @var{dh_params} in PKCS3 format according for @var{format} (an @code{x509-certificate-format} value).  Return a @code{u8vector} containing the result.
@end deffn

@c snarfed from ../guile/src/core.c:1189
@deffn {Scheme Procedure} pkcs3-import-dh-parameters array format
Import Diffie-Hellman parameters in PKCS3 format (further specified by @var{format}, an @code{x509-certificate-format} value) from @var{array} (a homogeneous array) and return a new @code{dh-params} object.
@end deffn

@c snarfed from ../guile/src/core.c:1157
@deffn {Scheme Procedure} make-dh-parameters bits
Return new Diffie-Hellman parameters.
@end deffn

@c snarfed from ../guile/src/core.c:1076
@deffn {Scheme Procedure} set-session-transport-port! session port
Use @var{port} as the input/output port for @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:1025
@deffn {Scheme Procedure} set-session-transport-fd! session fd
Use file descriptor @var{fd} as the underlying transport for @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:980
@deffn {Scheme Procedure} session-record-port session
Return a read-write port that may be used to communicate over @var{session}.  All invocations of @code{session-port} on a given session return the same object (in the sense of @code{eq?}).
@end deffn

@c snarfed from ../guile/src/core.c:754
@deffn {Scheme Procedure} record-receive! session array
Receive data from @var{session} into @var{array}, a uniform homogeneous array.  Return the number of bytes actually received.
@end deffn

@c snarfed from ../guile/src/core.c:721
@deffn {Scheme Procedure} record-send session array
Send the record constituted by @var{array} through @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:690
@deffn {Scheme Procedure} set-session-server-name! session type name
For a client, this procedure provides a way to inform the server that it is known under @var{name}, @i{via} the @code{SERVER NAME} TLS extension.  @var{type} must be a @code{server-name-type} value, @var{server-name-type/dns} for DNS names.
@end deffn

@c snarfed from ../guile/src/core.c:605
@deffn {Scheme Procedure} set-session-credentials! session cred
Use @var{cred} as @var{session}'s credentials.
@end deffn

@c snarfed from ../guile/src/core.c:583
@deffn {Scheme Procedure} cipher-suite->string kx cipher mac
Return the name of the given cipher suite.
@end deffn

@c snarfed from ../guile/src/core.c:544
@deffn {Scheme Procedure} set-session-priorities! session priorities
Have @var{session} use the given @var{priorities} for the ciphers, key exchange methods, MACs and compression methods.  @var{priorities} must be a string (@pxref{Priority Strings,,, gnutls, GnuTLS@comma{} Transport Layer Security Library for the GNU system}).  When @var{priorities} cannot be parsed, an @code{error/invalid-request} error is raised, with an extra argument indication the position of the error.

@end deffn

@c snarfed from ../guile/src/core.c:521
@deffn {Scheme Procedure} set-session-default-priority! session
Have @var{session} use the default priorities.
@end deffn

@c snarfed from ../guile/src/core.c:500
@deffn {Scheme Procedure} set-server-session-certificate-request! session request
Tell how @var{session}, a server-side session, should deal with certificate requests.  @var{request} should be either @code{certificate-request/request} or @code{certificate-request/require}.
@end deffn

@c snarfed from ../guile/src/core.c:460
@deffn {Scheme Procedure} session-our-certificate-chain session
Return our certificate chain for @var{session} (as sent to the peer) in raw format (a u8vector).  In the case of OpenPGP there is exactly one certificate.  Return the empty list if no certificate was used.
@end deffn

@c snarfed from ../guile/src/core.c:413
@deffn {Scheme Procedure} session-peer-certificate-chain session
Return the a list of certificates in raw format (u8vectors) where the first one is the peer's certificate.  In the case of OpenPGP, there is always exactly one certificate.  In the case of X.509, subsequent certificates indicate form a certificate chain.  Return the empty list if no certificate was sent.
@end deffn

@c snarfed from ../guile/src/core.c:389
@deffn {Scheme Procedure} session-client-authentication-type session
Return the client authentication type (a @code{credential-type} value) used in @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:369
@deffn {Scheme Procedure} session-server-authentication-type session
Return the server authentication type (a @code{credential-type} value) used in @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:349
@deffn {Scheme Procedure} session-authentication-type session
Return the authentication type (a @code{credential-type} value) used by @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:329
@deffn {Scheme Procedure} session-protocol session
Return the protocol used by @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:313
@deffn {Scheme Procedure} session-certificate-type session
Return @var{session}'s certificate type.
@end deffn

@c snarfed from ../guile/src/core.c:296
@deffn {Scheme Procedure} session-compression-method session
Return @var{session}'s compression method.
@end deffn

@c snarfed from ../guile/src/core.c:279
@deffn {Scheme Procedure} session-mac session
Return @var{session}'s MAC.
@end deffn

@c snarfed from ../guile/src/core.c:263
@deffn {Scheme Procedure} session-kx session
Return @var{session}'s kx.
@end deffn

@c snarfed from ../guile/src/core.c:247
@deffn {Scheme Procedure} session-cipher session
Return @var{session}'s cipher.
@end deffn

@c snarfed from ../guile/src/core.c:220
@deffn {Scheme Procedure} alert-send session level alert
Send @var{alert} via @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:203
@deffn {Scheme Procedure} alert-get session
Get an aleter from @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:185
@deffn {Scheme Procedure} rehandshake session
Perform a re-handshaking for @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:167
@deffn {Scheme Procedure} handshake session
Perform a handshake for @var{session}.
@end deffn

@c snarfed from ../guile/src/core.c:147
@deffn {Scheme Procedure} bye session how
Close @var{session} according to @var{how}.
@end deffn

@c snarfed from ../guile/src/core.c:122
@deffn {Scheme Procedure} make-session end
Return a new session for connection end @var{end}, either @code{connection-end/server} or @code{connection-end/client}.
@end deffn

@c snarfed from ../guile/src/core.c:111
@deffn {Scheme Procedure} gnutls-version 
Return a string denoting the version number of the underlying GnuTLS library, e.g., @code{"1.7.2"}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:235
@deffn {Scheme Procedure} openpgp-keyring? obj
Return true if @var{obj} is of type @code{openpgp-keyring}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:219
@deffn {Scheme Procedure} openpgp-private-key? obj
Return true if @var{obj} is of type @code{openpgp-private-key}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:203
@deffn {Scheme Procedure} openpgp-certificate? obj
Return true if @var{obj} is of type @code{openpgp-certificate}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:187
@deffn {Scheme Procedure} x509-private-key? obj
Return true if @var{obj} is of type @code{x509-private-key}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:171
@deffn {Scheme Procedure} x509-certificate? obj
Return true if @var{obj} is of type @code{x509-certificate}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:155
@deffn {Scheme Procedure} psk-client-credentials? obj
Return true if @var{obj} is of type @code{psk-client-credentials}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:139
@deffn {Scheme Procedure} psk-server-credentials? obj
Return true if @var{obj} is of type @code{psk-server-credentials}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:123
@deffn {Scheme Procedure} srp-client-credentials? obj
Return true if @var{obj} is of type @code{srp-client-credentials}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:107
@deffn {Scheme Procedure} srp-server-credentials? obj
Return true if @var{obj} is of type @code{srp-server-credentials}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:91
@deffn {Scheme Procedure} certificate-credentials? obj
Return true if @var{obj} is of type @code{certificate-credentials}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:75
@deffn {Scheme Procedure} rsa-parameters? obj
Return true if @var{obj} is of type @code{rsa-parameters}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:59
@deffn {Scheme Procedure} dh-parameters? obj
Return true if @var{obj} is of type @code{dh-parameters}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:43
@deffn {Scheme Procedure} anonymous-server-credentials? obj
Return true if @var{obj} is of type @code{anonymous-server-credentials}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:27
@deffn {Scheme Procedure} anonymous-client-credentials? obj
Return true if @var{obj} is of type @code{anonymous-client-credentials}.
@end deffn

@c snarfed from ../guile/src/smob-types.i.c:11
@deffn {Scheme Procedure} session? obj
Return true if @var{obj} is of type @code{session}.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:955
@deffn {Scheme Procedure} openpgp-certificate-format->string enumval
Return a string describing @var{enumval}, a @code{openpgp-certificate-format} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:914
@deffn {Scheme Procedure} error->string enumval
Return a string describing @var{enumval}, a @code{error} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:893
@deffn {Scheme Procedure} certificate-verify->string enumval
Return a string describing @var{enumval}, a @code{certificate-verify} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:848
@deffn {Scheme Procedure} key-usage->string enumval
Return a string describing @var{enumval}, a @code{key-usage} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:800
@deffn {Scheme Procedure} psk-key-format->string enumval
Return a string describing @var{enumval}, a @code{psk-key-format} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:759
@deffn {Scheme Procedure} server-name-type->string enumval
Return a string describing @var{enumval}, a @code{server-name-type} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:719
@deffn {Scheme Procedure} sign-algorithm->string enumval
Return a string describing @var{enumval}, a @code{sign-algorithm} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:698
@deffn {Scheme Procedure} pk-algorithm->string enumval
Return a string describing @var{enumval}, a @code{pk-algorithm} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:677
@deffn {Scheme Procedure} x509-subject-alternative-name->string enumval
Return a string describing @var{enumval}, a @code{x509-subject-alternative-name} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:634
@deffn {Scheme Procedure} x509-certificate-format->string enumval
Return a string describing @var{enumval}, a @code{x509-certificate-format} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:593
@deffn {Scheme Procedure} certificate-type->string enumval
Return a string describing @var{enumval}, a @code{certificate-type} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:572
@deffn {Scheme Procedure} protocol->string enumval
Return a string describing @var{enumval}, a @code{protocol} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:529
@deffn {Scheme Procedure} close-request->string enumval
Return a string describing @var{enumval}, a @code{close-request} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:488
@deffn {Scheme Procedure} certificate-request->string enumval
Return a string describing @var{enumval}, a @code{certificate-request} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:446
@deffn {Scheme Procedure} certificate-status->string enumval
Return a string describing @var{enumval}, a @code{certificate-status} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:402
@deffn {Scheme Procedure} handshake-description->string enumval
Return a string describing @var{enumval}, a @code{handshake-description} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:353
@deffn {Scheme Procedure} alert-description->string enumval
Return a string describing @var{enumval}, a @code{alert-description} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:286
@deffn {Scheme Procedure} alert-level->string enumval
Return a string describing @var{enumval}, a @code{alert-level} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:245
@deffn {Scheme Procedure} connection-end->string enumval
Return a string describing @var{enumval}, a @code{connection-end} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:204
@deffn {Scheme Procedure} compression-method->string enumval
Return a string describing @var{enumval}, a @code{compression-method} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:183
@deffn {Scheme Procedure} digest->string enumval
Return a string describing @var{enumval}, a @code{digest} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:139
@deffn {Scheme Procedure} mac->string enumval
Return a string describing @var{enumval}, a @code{mac} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:118
@deffn {Scheme Procedure} credentials->string enumval
Return a string describing @var{enumval}, a @code{credentials} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:74
@deffn {Scheme Procedure} params->string enumval
Return a string describing @var{enumval}, a @code{params} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:33
@deffn {Scheme Procedure} kx->string enumval
Return a string describing @var{enumval}, a @code{kx} value.
@end deffn

@c snarfed from ../guile/src/enum-map.i.c:12
@deffn {Scheme Procedure} cipher->string enumval
Return a string describing @var{enumval}, a @code{cipher} value.
@end deffn
