@node certtool Invocation
@subsection Invoking certtool
@pindex certtool
@ignore
#  -*- buffer-read-only: t -*- vi: set ro:
#
# DO NOT EDIT THIS FILE   (invoke-certtool.texi)
#
# It has been AutoGen-ed
# From the definitions    ../src/certtool-args.def
# and the template file   agtexi-cmd.tpl
@end ignore


Tool to parse and generate X.509 certificates, requests and private keys.
It can be used interactively or non interactively by
specifying the template command line option.

The tool accepts files or URLs supported by GnuTLS. In case PIN is required for the URL
access you can provide it using the environment variables GNUTLS_PIN and GNUTLS_SO_PIN.


This section was generated by @strong{AutoGen},
using the @code{agtexi-cmd} template and the option descriptions for the @code{certtool} program.
This software is released under the GNU General Public License, version 3 or later.


@anchor{certtool usage}
@subsubheading certtool help/usage (@option{--help})
@cindex certtool help

This is the automatically generated usage text for certtool.

The text printed is the same whether selected with the @code{help} option
(@option{--help}) or the @code{more-help} option (@option{--more-help}).  @code{more-help} will print
the usage text by passing it through a pager program.
@code{more-help} is disabled on platforms without a working
@code{fork(2)} function.  The @code{PAGER} environment variable is
used to select the program, defaulting to @file{more}.  Both will exit
with a status code of 0.

@exampleindent 0
@example
certtool - GnuTLS certificate tool
Usage:  certtool [ -<flag> [<val>] | --<name>[@{=| @}<val>] ]...

   -d, --debug=num            Enable debugging
                                - it must be in the range:
                                  0 to 9999
   -V, --verbose              More verbose output
                                - may appear multiple times
       --infile=file          Input file
                                - file must pre-exist
       --outfile=str          Output file
   -s, --generate-self-signed  Generate a self-signed certificate
   -c, --generate-certificate  Generate a signed certificate
       --generate-proxy       Generates a proxy certificate
       --generate-crl         Generate a CRL
   -u, --update-certificate   Update a signed certificate
   -p, --generate-privkey     Generate a private key
   -q, --generate-request     Generate a PKCS #10 certificate request
                                - prohibits the option 'infile'
   -e, --verify-chain         Verify a PEM encoded certificate chain
       --verify               Verify a PEM encoded certificate chain using a trusted list
       --verify-crl           Verify a CRL using a trusted list
                                - requires the option 'load-ca-certificate'
       --generate-dh-params   Generate PKCS #3 encoded Diffie-Hellman parameters
       --get-dh-params        Get the included PKCS #3 encoded Diffie-Hellman parameters
       --dh-info              Print information PKCS #3 encoded Diffie-Hellman parameters
       --load-privkey=str     Loads a private key file
       --load-pubkey=str      Loads a public key file
       --load-request=str     Loads a certificate request file
       --load-certificate=str Loads a certificate file
       --load-ca-privkey=str  Loads the certificate authority's private key file
       --load-ca-certificate=str Loads the certificate authority's certificate file
       --password=str         Password to use
       --null-password        Enforce a NULL password
       --empty-password       Enforce an empty password
       --hex-numbers          Print big number in an easier format to parse
       --cprint               In certain operations it prints the information in C-friendly format
   -i, --certificate-info     Print information on the given certificate
       --certificate-pubkey   Print certificate's public key
       --pgp-certificate-info  Print information on the given OpenPGP certificate
       --pgp-ring-info        Print information on the given OpenPGP keyring structure
   -l, --crl-info             Print information on the given CRL structure
       --crq-info             Print information on the given certificate request
       --no-crq-extensions    Do not use extensions in certificate requests
       --p12-info             Print information on a PKCS #12 structure
       --p12-name=str         The PKCS #12 friendly name to use
       --p7-info              Print information on a PKCS #7 structure
       --smime-to-p7          Convert S/MIME to PKCS #7 structure
   -k, --key-info             Print information on a private key
       --pgp-key-info         Print information on an OpenPGP private key
       --pubkey-info          Print information on a public key
       --v1                   Generate an X.509 version 1 certificate (with no extensions)
   -!, --to-p12               Generate a PKCS #12 structure
                                - requires the option 'load-certificate'
   -", --to-p8                Generate a PKCS #8 structure
   -8, --pkcs8                Use PKCS #8 format for private keys
   -#, --rsa                  Generate RSA key
   -$, --dsa                  Generate DSA key
   -%, --ecc                  Generate ECC (ECDSA) key
   -&, --ecdsa                an alias for the 'ecc' option
   -', --hash=str             Hash algorithm to use for signing
   -(, --inder                Use DER format for input certificates, private keys, and DH parameters
                                - disabled as '--no-inder'
   -), --inraw                an alias for the 'inder' option
   -*, --outder               Use DER format for output certificates, private keys, and DH parameters
                                - disabled as '--no-outder'
   -+, --outraw               an alias for the 'outder' option
   -,, --bits=num             Specify the number of bits for key generate
   --, --curve=str            Specify the curve used for EC key generation
   -., --sec-param=str        Specify the security level [low, legacy, medium, high, ultra]
   -/, --disable-quick-random  No effect
   -0, --template=str         Template file to use for non-interactive operation
   -1, --stdout-info          Print information to stdout instead of stderr
   -2, --ask-pass             Enable interaction for entering password when in batch mode.
   -3, --pkcs-cipher=str      Cipher to use for PKCS #8 and #12 operations
   -4, --provider=str         Specify the PKCS #11 provider library
   -v, --version[=arg]        output version information and exit
   -h, --help                 display extended usage information and exit
   -!, --more-help            extended usage information passed thru pager

Options are specified by doubled hyphens and their name or by a single
hyphen and the flag character.

Tool to parse and generate X.509 certificates, requests and private keys.
It can be used interactively or non interactively by specifying the
template command line option.

The tool accepts files or URLs supported by GnuTLS.  In case PIN is
required for the URL access you can provide it using the environment
variables GNUTLS_PIN and GNUTLS_SO_PIN.

@end example
@exampleindent 4

@anchor{certtool debug}
@subsubheading debug option (-d)

This is the ``enable debugging'' option.
This option takes a number argument.
Specifies the debug level.
@anchor{certtool generate-request}
@subsubheading generate-request option (-q)

This is the ``generate a pkcs #10 certificate request'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
must not appear in combination with any of the following options:
infile.
@end itemize

Will generate a PKCS #10 certificate request. To specify a private key use --load-privkey.
@anchor{certtool verify-chain}
@subsubheading verify-chain option (-e)

This is the ``verify a pem encoded certificate chain'' option.
The last certificate in the chain must be a self signed one.
@anchor{certtool verify}
@subsubheading verify option

This is the ``verify a pem encoded certificate chain using a trusted list'' option.
The trusted certificate list can be loaded with --load-ca-certificate. If no
certificate list is provided, then the system's certificate list is used.
@anchor{certtool verify-crl}
@subsubheading verify-crl option

This is the ``verify a crl using a trusted list'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
must appear in combination with the following options:
load-ca-certificate.
@end itemize

The trusted certificate list must be loaded with --load-ca-certificate.
@anchor{certtool get-dh-params}
@subsubheading get-dh-params option

This is the ``get the included pkcs #3 encoded diffie-hellman parameters'' option.
Returns stored DH parameters in GnuTLS. Those parameters are used in the SRP protocol. The parameters returned by fresh generation
are more efficient since GnuTLS 3.0.9.
@anchor{certtool load-privkey}
@subsubheading load-privkey option

This is the ``loads a private key file'' option.
This option takes a string argument.
This can be either a file or a PKCS #11 URL
@anchor{certtool load-pubkey}
@subsubheading load-pubkey option

This is the ``loads a public key file'' option.
This option takes a string argument.
This can be either a file or a PKCS #11 URL
@anchor{certtool load-certificate}
@subsubheading load-certificate option

This is the ``loads a certificate file'' option.
This option takes a string argument.
This can be either a file or a PKCS #11 URL
@anchor{certtool load-ca-privkey}
@subsubheading load-ca-privkey option

This is the ``loads the certificate authority's private key file'' option.
This option takes a string argument.
This can be either a file or a PKCS #11 URL
@anchor{certtool load-ca-certificate}
@subsubheading load-ca-certificate option

This is the ``loads the certificate authority's certificate file'' option.
This option takes a string argument.
This can be either a file or a PKCS #11 URL
@anchor{certtool password}
@subsubheading password option

This is the ``password to use'' option.
This option takes a string argument.
You can use this option to specify the password in the command line instead of reading it from the tty. Note, that the command line arguments are available for view in others in the system. Specifying password as '' is the same as specifying no password.
@anchor{certtool null-password}
@subsubheading null-password option

This is the ``enforce a null password'' option.
This option enforces a NULL password. This is different than the empty or no password in schemas like PKCS #8.
@anchor{certtool empty-password}
@subsubheading empty-password option

This is the ``enforce an empty password'' option.
This option enforces an empty password. This is different than the NULL or no password in schemas like PKCS #8.
@anchor{certtool cprint}
@subsubheading cprint option

This is the ``in certain operations it prints the information in c-friendly format'' option.
In certain operations it prints the information in C-friendly format, suitable for including into C programs.
@anchor{certtool p12-name}
@subsubheading p12-name option

This is the ``the pkcs #12 friendly name to use'' option.
This option takes a string argument.
The name to be used for the primary certificate and private key in a PKCS #12 file.
@anchor{certtool pubkey-info}
@subsubheading pubkey-info option

This is the ``print information on a public key'' option.
The option combined with --load-request, --load-pubkey, --load-privkey and --load-certificate will extract the public key of the object in question.
@anchor{certtool to-p12}
@subsubheading to-p12 option

This is the ``generate a pkcs #12 structure'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
must appear in combination with the following options:
load-certificate.
@end itemize

It requires a certificate, a private key and possibly a CA certificate to be specified.
@anchor{certtool rsa}
@subsubheading rsa option

This is the ``generate rsa key'' option.
When combined with --generate-privkey generates an RSA private key.
@anchor{certtool dsa}
@subsubheading dsa option

This is the ``generate dsa key'' option.
When combined with --generate-privkey generates a DSA private key.
@anchor{certtool ecc}
@subsubheading ecc option

This is the ``generate ecc (ecdsa) key'' option.
When combined with --generate-privkey generates an elliptic curve private key to be used with ECDSA.
@anchor{certtool ecdsa}
@subsubheading ecdsa option

This is an alias for the @code{ecc} option,
@pxref{certtool ecc, the ecc option documentation}.

@anchor{certtool hash}
@subsubheading hash option

This is the ``hash algorithm to use for signing'' option.
This option takes a string argument.
Available hash functions are SHA1, RMD160, SHA256, SHA384, SHA512.
@anchor{certtool inder}
@subsubheading inder option

This is the ``use der format for input certificates, private keys, and dh parameters '' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
can be disabled with --no-inder.
@end itemize

The input files will be assumed to be in DER or RAW format. 
Unlike options that in PEM input would allow multiple input data (e.g. multiple 
certificates), when reading in DER format a single data structure is read.
@anchor{certtool inraw}
@subsubheading inraw option

This is an alias for the @code{inder} option,
@pxref{certtool inder, the inder option documentation}.

@anchor{certtool outder}
@subsubheading outder option

This is the ``use der format for output certificates, private keys, and dh parameters'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
can be disabled with --no-outder.
@end itemize

The output will be in DER or RAW format.
@anchor{certtool outraw}
@subsubheading outraw option

This is an alias for the @code{outder} option,
@pxref{certtool outder, the outder option documentation}.

@anchor{certtool curve}
@subsubheading curve option

This is the ``specify the curve used for ec key generation'' option.
This option takes a string argument.
Supported values are secp192r1, secp224r1, secp256r1, secp384r1 and secp521r1.
@anchor{certtool sec-param}
@subsubheading sec-param option

This is the ``specify the security level [low, legacy, medium, high, ultra]'' option.
This option takes a string argument @file{Security parameter}.
This is alternative to the bits option.
@anchor{certtool ask-pass}
@subsubheading ask-pass option

This is the ``enable interaction for entering password when in batch mode.'' option.
This option will enable interaction to enter password when in batch mode. That is useful when the template option has been specified.
@anchor{certtool pkcs-cipher}
@subsubheading pkcs-cipher option

This is the ``cipher to use for pkcs #8 and #12 operations'' option.
This option takes a string argument @file{Cipher}.
Cipher may be one of 3des, 3des-pkcs12, aes-128, aes-192, aes-256, rc2-40, arcfour.
@anchor{certtool provider}
@subsubheading provider option

This is the ``specify the pkcs #11 provider library'' option.
This option takes a string argument.
This will override the default options in /etc/gnutls/pkcs11.conf
@anchor{certtool exit status}
@subsubheading certtool exit status

One of the following exit values will be returned:
@table @samp
@item 0 (EXIT_SUCCESS)
Successful program execution.
@item 1 (EXIT_FAILURE)
The operation failed or the command syntax was not valid.
@end table
@anchor{certtool See Also}
@subsubheading certtool See Also
    p11tool (1)
@anchor{certtool Examples}
@subsubheading certtool Examples
@subsubheading Generating private keys
To create an RSA private key, run:
@example
$ certtool --generate-privkey --outfile key.pem --rsa
@end example

To create a DSA or elliptic curves (ECDSA) private key use the
above command combined with 'dsa' or 'ecc' options.

@subsubheading Generating certificate requests
To create a certificate request (needed when the certificate is  issued  by
another party), run:
@example
certtool --generate-request --load-privkey key.pem \
   --outfile request.pem
@end example

If the private key is stored in a smart card you can generate
a request by specifying the private key object URL.
@example
$ ./certtool --generate-request --load-privkey "pkcs11:..." \
  --load-pubkey "pkcs11:..." --outfile request.pem
@end example


@subsubheading Generating a self-signed certificate
To create a self signed certificate, use the command:
@example
$ certtool --generate-privkey --outfile ca-key.pem
$ certtool --generate-self-signed --load-privkey ca-key.pem \
   --outfile ca-cert.pem
@end example

Note that a self-signed certificate usually belongs to a certificate
authority, that signs other certificates.

@subsubheading Generating a certificate
To generate a certificate using the previous request, use the command:
@example
$ certtool --generate-certificate --load-request request.pem \
   --outfile cert.pem --load-ca-certificate ca-cert.pem \
   --load-ca-privkey ca-key.pem
@end example

To generate a certificate using the private key only, use the command:
@example
$ certtool --generate-certificate --load-privkey key.pem \
   --outfile cert.pem --load-ca-certificate ca-cert.pem \
   --load-ca-privkey ca-key.pem
@end example

@subsubheading Certificate information
To view the certificate information, use:
@example
$ certtool --certificate-info --infile cert.pem
@end example

@subsubheading PKCS #12 structure generation
To generate a PKCS #12 structure using the previous key and certificate,
use the command:
@example
$ certtool --load-certificate cert.pem --load-privkey key.pem \
   --to-p12 --outder --outfile key.p12
@end example

Some tools (reportedly web browsers) have problems with that file
because it does not contain the CA certificate for the certificate.
To work around that problem in the tool, you can use the
--load-ca-certificate parameter as follows:

@example
$ certtool --load-ca-certificate ca.pem \
  --load-certificate cert.pem --load-privkey key.pem \
  --to-p12 --outder --outfile key.p12
@end example

@subsubheading Diffie-Hellman parameter generation
To generate parameters for Diffie-Hellman key exchange, use the command:
@example
$ certtool --generate-dh-params --outfile dh.pem --sec-param medium
@end example

@subsubheading Proxy certificate generation
Proxy certificate can be used to delegate your credential to a
temporary, typically short-lived, certificate.  To create one from the
previously created certificate, first create a temporary key and then
generate a proxy certificate for it, using the commands:

@example
$ certtool --generate-privkey > proxy-key.pem
$ certtool --generate-proxy --load-ca-privkey key.pem \
  --load-privkey proxy-key.pem --load-certificate cert.pem \
  --outfile proxy-cert.pem
@end example

@subsubheading Certificate revocation list generation
To create an empty Certificate Revocation List (CRL) do:

@example
$ certtool --generate-crl --load-ca-privkey x509-ca-key.pem \
           --load-ca-certificate x509-ca.pem
@end example

To create a CRL that contains some revoked certificates, place the
certificates in a file and use @code{--load-certificate} as follows:

@example
$ certtool --generate-crl --load-ca-privkey x509-ca-key.pem \
  --load-ca-certificate x509-ca.pem --load-certificate revoked-certs.pem
@end example

To verify a Certificate Revocation List (CRL) do:

@example
$ certtool --verify-crl --load-ca-certificate x509-ca.pem < crl.pem
@end example
@anchor{certtool Files}
@subsubheading certtool Files
@subsubheading Certtool's template file format
A template file can be used to avoid the interactive questions of
certtool. Initially create a file named 'cert.cfg' that contains the information
about the certificate. The template can be used as below:

@example
$ certtool --generate-certificate --load-privkey key.pem  \
   --template cert.cfg --outfile cert.pem \
   --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem
@end example

An example certtool template file that can be used to generate a certificate
request or a self signed certificate follows.

@example
# X.509 Certificate options
#
# DN options

# The organization of the subject.
organization = "Koko inc."

# The organizational unit of the subject.
unit = "sleeping dept."

# The locality of the subject.
# locality =

# The state of the certificate owner.
state = "Attiki"

# The country of the subject. Two letter code.
country = GR

# The common name of the certificate owner.
cn = "Cindy Lauper"

# A user id of the certificate owner.
#uid = "clauper"

# Set domain components
#dc = "name"
#dc = "domain"

# If the supported DN OIDs are not adequate you can set
# any OID here.
# For example set the X.520 Title and the X.520 Pseudonym
# by using OID and string pairs.
#dn_oid = 2.5.4.12 Dr. 
#dn_oid = 2.5.4.65 jackal

# This is deprecated and should not be used in new
# certificates.
# pkcs9_email = "none@@none.org"

# An alternative way to set the certificate's distinguished name directly
# is with the "dn" option. The attribute names allowed are:
# C (country), street, O (organization), OU (unit), title, CN (common name),
# L (locality), ST (state), placeOfBirth, gender, countryOfCitizenship, 
# countryOfResidence, serialNumber, telephoneNumber, surName, initials, 
# generationQualifier, givenName, pseudonym, dnQualifier, postalCode, name, 
# businessCategory, DC, UID, jurisdictionOfIncorporationLocalityName, 
# jurisdictionOfIncorporationStateOrProvinceName,
# jurisdictionOfIncorporationCountryName, XmppAddr, and numeric OIDs.

#dn = "cn=Nik,st=Attiki,C=GR,surName=Mavrogiannopoulos,2.5.4.9=Arkadias"

# The serial number of the certificate
# Comment the field for a time-based serial number.
serial = 007

# In how many days, counting from today, this certificate will expire.
# Use -1 if there is no expiration date.
expiration_days = 700

# Alternatively you may set concrete dates and time. The GNU date string 
# formats are accepted. See:
# http://www.gnu.org/software/tar/manual/html_node/Date-input-formats.html

#activation_date = "2004-02-29 16:21:42"
#expiration_date = "2025-02-29 16:24:41"

# X.509 v3 extensions

# A dnsname in case of a WWW server.
#dns_name = "www.none.org"
#dns_name = "www.morethanone.org"

# A subject alternative name URI
#uri = "http://www.example.com"

# An IP address in case of a server.
#ip_address = "192.168.1.1"

# An email in case of a person
email = "none@@none.org"

# Challenge password used in certificate requests
challenge_password = 123456

# Password when encrypting a private key
#password = secret

# An URL that has CRLs (certificate revocation lists)
# available. Needed in CA certificates.
#crl_dist_points = "http://www.getcrl.crl/getcrl/"

# Whether this is a CA certificate or not
#ca

# for microsoft smart card logon
# key_purpose_oid = 1.3.6.1.4.1.311.20.2.2

### Other predefined key purpose OIDs

# Whether this certificate will be used for a TLS client
#tls_www_client

# Whether this certificate will be used for a TLS server
#tls_www_server

# Whether this certificate will be used to sign data (needed
# in TLS DHE ciphersuites).
signing_key

# Whether this certificate will be used to encrypt data (needed
# in TLS RSA ciphersuites). Note that it is preferred to use different
# keys for encryption and signing.
encryption_key

# Whether this key will be used to sign other certificates.
#cert_signing_key

# Whether this key will be used to sign CRLs.
#crl_signing_key

# Whether this key will be used to sign code.
#code_signing_key

# Whether this key will be used to sign OCSP data.
#ocsp_signing_key

# Whether this key will be used for time stamping.
#time_stamping_key

# Whether this key will be used for IPsec IKE operations.
#ipsec_ike_key

### end of key purpose OIDs

# When generating a certificate from a certificate
# request, then honor the extensions stored in the request
# and store them in the real certificate.
#honor_crq_extensions

# Path length contraint. Sets the maximum number of
# certificates that can be used to certify this certificate.
# (i.e. the certificate chain length)
#path_len = -1
#path_len = 2

# OCSP URI
# ocsp_uri = http://my.ocsp.server/ocsp

# CA issuers URI
# ca_issuers_uri = http://my.ca.issuer

# Certificate policies
#policy1 = 1.3.6.1.4.1.5484.1.10.99.1.0
#policy1_txt = "This is a long policy to summarize"
#policy1_url = http://www.example.com/a-policy-to-read

#policy2 = 1.3.6.1.4.1.5484.1.10.99.1.1
#policy2_txt = "This is a short policy"
#policy2_url = http://www.example.com/another-policy-to-read

# Name constraints

# DNS
#nc_permit_dns = example.com
#nc_exclude_dns = test.example.com

# EMAIL
#nc_permit_email = "nmav@@ex.net"

# Exclude subdomains of example.com
#nc_exclude_email = .example.com

# Exclude all e-mail addresses of example.com
#nc_exclude_email = example.com


# Options for proxy certificates
#proxy_policy_language = 1.3.6.1.5.5.7.21.1


# Options for generating a CRL

# The number of days the next CRL update will be due.
# next CRL update will be in 43 days
#crl_next_update = 43

# this is the 5th CRL by this CA
# Comment the field for a time-based number.
#crl_number = 5

@end example
